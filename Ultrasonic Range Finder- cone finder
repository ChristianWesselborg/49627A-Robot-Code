
#pragma config(Sensor, dgtl8,  sonarSensor,         sensorSONAR_cm)
#pragma config(Motor,  port1,           leftMotor,     tmotorNormal, openLoop, reversed)
#pragma config(Motor,  port10,           rightMotor,    tmotorNormal, openLoop)

task main()
{
  int speed;            // Will hold a speed for the motors.
  int sonar_value;      // Will hold the current reading of the sonar sensor.
  int sonarpre;         // Records previous value for comparison
  int distance = 25;    // Specified distance to be at 25 centimeters.
  int locateL = 0;      // Flag for the left side of the cone
  int locateR = 0;      // Flag for the right side of the cone
  int locate = 0;       // Flag to break loop when left and right sides of the cone are identified
  int rangeL;           // Records the range for left side
  int rangeR;           // Records the range for the right side
  int rangeT;           // Finds the center of the cone
  int aquired = 0;      // Flag for turning
  
  if(vexRT[Btn5U] == 1)
    startTask (one);
 }
 
 task one()
 {
  while(locate == 0 && (vexRT[Btn5U] == 1))
  {
   motor[leftMotor] = -127;  // reset sweep to one side
   motor[rightMotor] = 127;
   wait1Msec(500);            // give time for servo to move
   
   motor[leftMotor] = 0;
   motor[rightMotor] = 0;
   
   for(int i = -127; i < 127; i+1)
   {
    motor[leftMotor] = 30;
    motor[rightMotor] = -30;
    wait1Msec(20);
    sonarpre = sonar_value;
    sonar_value = SensorValue(sonarSensor);
    
     if(((sonar_value - sonarpre) > 20) && (locateL == 0) && (locate == 0))
     {
      locateL = 1;
      rangeL = sonar_value;
     }
     if((locate  == 0) && (locateL == 0))
     {
       if(sonarpre > sonar_value)
       rangeT = sonar_value;
     }
     if((((sonarpre - sonar_value) > 20) || (sonar_value == -1)) && (locateL == 1))
     {
      locateR = 1;
      rangeR = sonar_value;
      locate = 1;
     }
   }
    
  motor[leftMotor] = 0;
  motor[rightMotor] = 0;
  wait1Msec(100);
  
    while(aquired == 0)
    {
      motor[leftMotor] = -30;
      motor[rightMotor] = 30;
  
      sonar_value = SensorValue(sonarSensor);
  
       if(sonar_value == rangeT)
        {
          aquired == 1;
        }
    }
  }
   
   
  
  
  while(true)
  {
    sonar_value = SensorValue(sonarSensor);   // Store the current reading from the Sonar Sensor to 'sonar_value'.

    clearLCDLine(0);                          /* Display the    */
    displayLCDPos(0,0);                       /* reading of the */
    displayNextLCDString("Sonar: ");          /* Sonar Sensor   */
    displayNextLCDNumber(sonar_value);        /* on line 0.     */

    if(sonar_value < 0)                       // If the object is out of range: (returns -1)
    {
      speed = 127;                            // Set 'speed' to full speed ahead!
    }
    else
    {
      speed = (sonar_value - distance)*2;     // Move the robot at a speed proportional to how far off its desired distance it currently is
    }

    clearLCDLine(1);                          /* Display the    */
    displayLCDPos(1,0);                       /* current speed  */
    displayNextLCDString("Speed: ");          /* of the motors  */
    displayNextLCDNumber(speed);              /* on line 1.     */

    motor[leftMotor]  = speed;                /* Set both the left and right */
    motor[rightMotor] = speed;                /* motors to run at 'speed'.   */

    wait1Msec(100);                           // Take 10 readings per second.
  }
}




